from abc import ABC, abstractmethod
from igor.event import Event
from igor.response import Response
from igor.hub import Hub


class Reactor(ABC):
    """
    Abstract base class for all reactors in Igor.

    A reactor is responsible for handling specific types of events and generating
    appropriate responses. It encapsulates a particular piece of functionality or
    business logic.

    Attributes:
        hub (Hub): The central hub that manages all channels and reactors.
    """

    def __init__(self, hub: Hub):
        """
        Initialize a new Reactor instance.

        Args:
            hub (Hub): The central hub that manages all channels and reactors.
        """
        self.hub = hub

    @abstractmethod
    async def can_handle(self, event: Event) -> bool:
        """
        Determine if this reactor can handle the given event.

        This method should return True if the reactor can handle the event,
        and False otherwise.

        Args:
            event (Event): The event to be checked.

        Returns:
            bool: True if this reactor can handle the event, False otherwise.
        """
        pass

    @abstractmethod
    def handle(self, event: Event) -> Response:
        """
        Handle the given event and generate a response.

        This method should implement the core logic of the reactor. It will only
        be called if can_handle() returns True for the given event.

        Args:
            event (Event): The event to be handled.

        Returns:
            Response: The response generated by handling the event.
        """
        pass

